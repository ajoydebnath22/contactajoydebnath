{
  "sql": {
    "title": "SQL (Structured Query Language)",
    "description": "SQL is a standardized programming language for managing and manipulating relational databases (RDBMS). It is widely used to interact with databases and perform various operations, such as querying, updating, inserting, and deleting data.",
    "image": "/images/sql.jpg",
    "videos": [
      "https://www.youtube.com/watch?v=C41iLuLa20s"
    ],
    "googleDoc": "1dDzbyyUHvdYfas3aHuORIC5ZgiwpiTASst9knxrZBJg",
    "theory": "SQL is a domain-specific language used in programming and designed for managing data in an RDBMS. SQL is particularly useful for handling structured data, which consists of relations among entities and variables."
  },
  "ddl": {
    "title": "DDL (Data Definition Language)",
    "description": "DDL or Data Definition Language actually consists of the SQL commands that can be used to defining, altering, and deleting database structures such as tables, indexes, and schemas.",
    "image": "/images/sql.jpg",
    "videos": [
      "https://youtu.be/3RqS4mBMwfE",
      "https://youtu.be/3kwv1tB2_7g"
    ],
    "googleDoc": "1dDzbyyUHvdYfas3aHuORIC5ZgiwpiTASst9knxrZBJg",
    "theory": "DDL or Data Definition Language actually consists of the SQL commands that can be used to defining, altering, and deleting database structures such as tables, indexes, and schemas."
  },
    "java-hello-world": {
      "title": "First Java Program - Hello World",
      "description": "Learn how to write your first Java program and print 'Hello World'.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/7F1TdO4KeiM"],
      "googleDoc": "",
      "theory": "A Java program starts execution from the `main` method. The `System.out.println` statement is used to print text on the console."
    },
    "java-environment-setup": {
      "title": "Environment Setup & Path",
      "description": "Learn how to set up the Java environment and why setting the path variable is important.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/p6MLxaCKr80"],
      "googleDoc": "",
      "theory": "To compile and run Java programs, we need to install JDK and configure the environment variable."
    },
    "java-class-object": {
      "title": "Class, Object, Method, Constructors",
      "description": "Understanding the core concepts of Object-Oriented Programming in Java.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/vFpK067HbCs"],
      "googleDoc": "",
      "theory": "A class is a blueprint for objects, and objects are instances of classes."
    },
    "java-abstraction": {
      "title": "Abstraction & Abstract Class",
      "description": "Learn about abstraction and how abstract classes work in Java.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/vgKCmdgcI_0"],
      "googleDoc": "",
      "theory": "Abstraction hides implementation details and only exposes the necessary functionality."
    },
    "java-interface": {
      "title": "Abstraction & Interface",
      "description": "Understanding interfaces in Java and their role in abstraction.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/E86QsfsNTIY"],
      "googleDoc": "",
      "theory": "An interface defines a contract that classes must implement."
    },
    "java-inheritance": {
      "title": "Inheritance & Multiple Inheritance Issue",
      "description": "Exploring inheritance and why multiple inheritance is not allowed in Java.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/y6HgMh-I45M"],
      "googleDoc": "",
      "theory": "Inheritance allows a class to acquire properties and behaviors from another class."
    },
    "java-polymorphism": {
      "title": "Polymorphism & Overloading",
      "description": "Understanding method overloading and method overriding in Java.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/mCMqkKGrb7s"],
      "googleDoc": "",
      "theory": "Polymorphism allows methods to have different behaviors based on the context."
    },
    "java-encapsulation": {
      "title": "Encapsulation & JavaBean Class",
      "description": "Learn about encapsulation, data hiding, and JavaBean class.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/ZH4GwBWXpPQ"],
      "googleDoc": "",
      "theory": "Encapsulation protects data by restricting direct access to variables."
    },
    "java-access-modifiers": {
      "title": "Access Modifiers",
      "description": "Exploring private, public, default, and protected access modifiers in Java.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/Fkkcc6ypCtw"],
      "googleDoc": "",
      "theory": "Access modifiers control the visibility of classes, methods, and variables."
    },
    "java-static-keyword": {
      "title": "Static Keyword",
      "description": "Understanding static variables, methods, blocks, and nested classes.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/tgzUgat88_A"],
      "googleDoc": "",
      "theory": "Static members belong to the class rather than instances of the class."
    },
    "java-final-keyword": {
      "title": "Final Keyword",
      "description": "Learn how to use the final keyword with variables, methods, and classes.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/GaprusN0uNE"],
      "googleDoc": "",
      "theory": "The `final` keyword prevents modification of variables, methods, and inheritance."
    },
    "java-this-keyword": {
      "title": "'this' keyword",
      "description": "Understanding the `this` keyword and its applications in Java.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/x_TJINrbqtk"],
      "googleDoc": "",
      "theory": "The `this` keyword refers to the current instance of a class."
    },
    "java-super-keyword": {
      "title": "'super' keyword",
      "description": "Exploring the `super` keyword in Java and its role in inheritance.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/Jj1E2M6e-O0"],
      "googleDoc": "",
      "theory": "The `super` keyword is used to refer to the parent class's constructor or methods."
    },
    "java-collection-framework": {
      "title": "Collection Framework",
      "description": "An introduction to Java's Collection Framework and its various implementations.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/DFzzcqt7Gvk"],
      "googleDoc": "",
      "theory": "The Collection Framework provides reusable data structures and algorithms."
    },
    "java-arraylist": {
      "title": "ArrayList & ListIterator",
      "description": "Understanding ArrayList, its methods, and ListIterator in Java.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/O3QrQHQyiLQ"],
      "googleDoc": "",
      "theory": "ArrayList is a dynamic array implementation in Java."
    },
    "java-linkedlist": {
      "title": "LinkedList",
      "description": "Exploring LinkedList, its methods, and internal working.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/jw_KoDctxtg"],
      "googleDoc": "",
      "theory": "LinkedList is a doubly-linked list implementation in Java."
    },
    "java-hashset": {
      "title": "HashSet & How It Works",
      "description": "Understanding HashSet and how it works internally in Java.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/7YPTXWkqzV8", "https://youtu.be/nQOLOBlgw-w"],
      "googleDoc": "",
      "theory": "HashSet stores unique elements and does not maintain insertion order."
    },
    "java-singleton-pattern": {
      "title": "Singleton Design Pattern",
      "description": "Learn about Singleton Design Pattern in Java with early and lazy instantiation.",
      "image": "/images/java.jpg",
      "videos": ["https://youtu.be/UHtUOSvqVs4", "https://youtu.be/gplmcZV7gp4"],
      "googleDoc": "",
      "theory": "Singleton ensures that only one instance of a class exists at a time."
    },
  "java-singleton-pattern": {
    "title": "Singleton Design Pattern",
    "description": "Learn about Singleton Design Pattern in Java with early and lazy instantiation.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/UHtUOSvqVs4", "https://youtu.be/gplmcZV7gp4"],
    "googleDoc": "",
    "theory": "Singleton ensures that only one instance of a class exists at a time."
  },
  "java-lambda-expression": {
    "title": "Lambda Expressions & Functional Interfaces",
    "description": "Learn about lambda expressions, functional interfaces, and anonymous classes in Java.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/o88ycNO3R7Q"],
    "googleDoc": "",
    "theory": "Lambda expressions provide a concise way to implement functional interfaces."
  },
  "java-exception-hierarchy": {
    "title": "Exception Hierarchy & Propagation",
    "description": "Understanding Java's exception hierarchy, call stack, and exception propagation.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/D4cigYGNtu8"],
    "googleDoc": "",
    "theory": "Exceptions in Java follow a hierarchical structure and propagate through the call stack."
  },
  "java-exception-handling": {
    "title": "Exception Handling (try, catch, finally)",
    "description": "Learn how to handle exceptions using try, catch, and finally blocks in Java.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/8l-fXr_nYe4"],
    "googleDoc": "",
    "theory": "Try-catch blocks help in handling runtime errors and preventing program crashes."
  },
  "java-custom-exception": {
    "title": "Custom Exceptions & throw, throws",
    "description": "Learn how to create custom exceptions and use throw/throws keywords in Java.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/0cSas4k7CUQ"],
    "googleDoc": "",
    "theory": "Custom exceptions provide meaningful error handling for specific scenarios."
  },
  "java-object-cloning": {
    "title": "Object Cloning (Shallow & Deep Copy)",
    "description": "Understanding object cloning, shallow copy, and deep copy in Java.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/YppKcqWoaZA"],
    "googleDoc": "",
    "theory": "Cloning allows creating duplicate objects with the same or different memory references."
  },
  "java-immutable-class": {
    "title": "Creating Immutable Class in Java",
    "description": "Learn how to create immutable classes in Java using Immutable Design Pattern.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/NJE2wrvsdaY"],
    "googleDoc": "",
    "theory": "Immutable objects do not change their state once created."
  },
  "java-factory-method-pattern": {
    "title": "Factory Method Pattern",
    "description": "Learn about the Factory Method Design Pattern in Java.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/A5JgNaFMiUY"],
    "googleDoc": "",
    "theory": "The Factory Method Pattern provides an interface for creating objects without specifying their exact class."
  },
  "java-stream-api": {
    "title": "Stream API (Intermediate & Terminal Operations)",
    "description": "Learn about Java Stream API and its intermediate & terminal operations.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/nqu-cDQzzAA", "https://youtu.be/HVGUhOBGrk8"],
    "googleDoc": "",
    "theory": "Stream API allows functional-style operations on collections with lazy evaluation."
  },
  "java-optional-class": {
    "title": "Guide To Java 8 Optional Class",
    "description": "Learn about Optional class and how to handle null values effectively in Java 8.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/53wicqO5oeo", "https://youtu.be/bf9C7vBz0bI"],
    "googleDoc": "",
    "theory": "Optional helps to avoid NullPointerException by wrapping potential null values."
  },
  "java-sorting-comparable-comparator": {
    "title": "Sorting with Comparable & Comparator",
    "description": "Understanding how sorting works in Java using Comparable and Comparator interfaces.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/2uP0mnkJxY8"],
    "googleDoc": "",
    "theory": "Comparable provides natural ordering, whereas Comparator allows custom sorting logic."
  },
  "java-equals-vs-equality-operator": {
    "title": "Difference between equals() & ==",
    "description": "Understanding the difference between equals() method and == operator in Java.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/jLe_zoyf8HI"],
    "googleDoc": "",
    "theory": "The `==` operator compares memory references, while `equals()` checks object content."
  },
  "java-scanner-class": {
    "title": "Java Scanner Class",
    "description": "Learn how to use Java Scanner Class to take user input in Java.",
    "image": "/images/java.jpg",
    "videos": ["https://youtu.be/fxdKvG47P8Q"],
    "googleDoc": "",
    "theory": "Scanner is a utility class that allows reading input from various sources like keyboard and files."
  },
  "spring-ioc": {
    "title": "IOC, Dependency Injection & Coupling",
    "description": "Learn about Inversion of Control (IOC), Dependency Injection, and how it reduces coupling in Spring.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/oRBw1H2_C4k"],
    "googleDoc": "",
    "theory": "IOC is a design principle in which the control of object creation and dependency management is given to a container."
  },
  "spring-ioc-container": {
    "title": "IOC Container & BeanFactory",
    "description": "Understanding IOC Container, BeanFactory, and important APIs in Spring.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/ZHFmQ5P7dU0"],
    "googleDoc": "",
    "theory": "Spring provides IOC containers like BeanFactory and ApplicationContext to manage bean lifecycles."
  },
  "spring-bean-scope": {
    "title": "Bean Scope (Singleton & Prototype)",
    "description": "Learn about different bean scopes in Spring, including Singleton and Prototype.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/sBNSi2FCaf4"],
    "googleDoc": "",
    "theory": "Bean scope defines the lifecycle and visibility of beans within the Spring container."
  },
  "spring-autowiring": {
    "title": "Autowiring & Modes",
    "description": "Understanding Autowiring in Spring and its different modes: byName, byType, and constructor.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/0catrd8gf98"],
    "googleDoc": "",
    "theory": "Spring Autowiring allows automatic dependency injection to reduce XML configuration."
  },
  "spring-configuration": {
    "title": "@Configuration & @Bean",
    "description": "Learn how @Configuration and @Bean annotations work in Spring.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/OXFVdoxX4SE", "https://youtu.be/lmQ0sy74QkA"],
    "googleDoc": "",
    "theory": "The @Configuration annotation marks a class as a source of bean definitions, while @Bean defines individual beans."
  },
  "spring-jdbc": {
    "title": "Spring JDBC & PreparedStatement",
    "description": "Understanding JDBC Template and PreparedStatement in Spring.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/jkc3RzTxzXE"],
    "googleDoc": "",
    "theory": "Spring provides JDBC Template to simplify database interactions using PreparedStatement."
  },
  "spring-jdbctemplate": {
    "title": "JDBCTemplate & RowMapper",
    "description": "Learn about JDBC Template, RowMapper, and ResultSetExtractor in Spring.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/NsytsxHTUro"],
    "googleDoc": "",
    "theory": "JDBC Template simplifies database operations, and RowMapper helps map query results to objects."
  },
  "spring-mvc": {
    "title": "Spring MVC Basics",
    "description": "Understanding the basics of Model-View-Controller (MVC) in Spring.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/ZPVvmX_yntA"],
    "googleDoc": "",
    "theory": "Spring MVC is a web framework that follows the MVC design pattern to separate concerns."
  },
  "spring-mvc-jsp": {
    "title": "Spring MVC with JSP",
    "description": "Learn how to integrate JSP (Java Server Pages) with Spring MVC.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/bmHuIsqGqB0", "https://youtu.be/yMX1wRM8wco"],
    "googleDoc": "",
    "theory": "Spring MVC supports JSP as a view technology, allowing dynamic web page rendering."
  },
  "spring-mvc-form": {
    "title": "Spring MVC Form Handling",
    "description": "Learn how to handle forms in Spring MVC using @RequestParam and ModelAttribute.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/F40zq_lCas0"],
    "googleDoc": "",
    "theory": "Spring MVC provides features to handle form submissions and bind form data to model objects."
  },
  "spring-mvc-data-binding": {
    "title": "Data Binding in Spring MVC",
    "description": "Understanding data binding in Spring MVC with examples.",
    "image": "/images/spring.jpg",
    "videos": ["https://youtu.be/TG7DDnV9FmM", "https://youtu.be/N37iNUwzfLw"],
    "googleDoc": "",
    "theory": "Data binding in Spring MVC allows automatic conversion of form input into Java objects."
  }
  
}
